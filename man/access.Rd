% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kernel_access.R
\name{access}
\alias{access}
\alias{demoKernel}
\alias{getColumns}
\alias{getParameters}
\alias{getSubKernel}
\alias{getType}
\alias{setParameters}
\title{Interaction with kernel objects}
\usage{
getType(kernel)

getColumns(kernel)

getParameters(kernel, continuous = FALSE)

setParameters(kernel, ..., continuous = FALSE)

getSubKernel(kernel, which = 1)

demoKernel(kernel, data = NULL, ndraw = 3)
}
\arguments{
\item{kernel}{a kernel object}

\item{continuous}{whether the parameter values should be reported (and set)
on the scale of their continuous transformation rather than their true value
(the default).}

\item{which}{which of the two \emph{immediate} subkernels of the kernel to extract}

\item{data}{a dataset from which to calculate the range of values over which to draw example GPs.
If \code{NULL}, the range -5 to 5 is used, arbitrarily.}

\item{ndraw}{the number of (zero-mean) GP realisations from the the kernel to plot.}

\item{\dots}{parameters to be updated and the new values for them to take 
(see examples). Note that these must be passed as values, not as parameter
objects}
}
\description{
Access and interact with kernel objects. 
These functions allow you to report the type of kernel (\code{getType}), 
extract subkernels (\code{getSubKernel}) report kernel parameters 
(\code{getParameters}) and update them (\code{setParameters}).
}
\examples{
 
# construct a kernel with one feature
k1 <- rbf('temperature')
 
 
# get the kernel type
getType(k1)
 
 
# get the names of the columns the kernel acts on
getColumns(k1)
 
 
# get the parameters of the kernel
params <- getParameters(k1)
params
 
# evaluate and visualise it
image(k1(pressure))

# change the length scale
k2 <- setParameters(k1, l = 10)
getParameters(k2)

# change the lengthhscale and variance
k2 <- setParameters(k1, l = 9, sigma = 1.3)
getParameters(k2)

# evaluate and visualise the new kernel
image(k2(pressure))
 
 
# build a compositional kernel
k2 <- k1 + k1 * k1
 
# extract a subkernel
k3 <- getSubKernel(k2, 1)
 
 
#plot example GPs from this kernel, applied to the pressure dataset
demoKernel(k1, data = pressure)

}


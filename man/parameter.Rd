% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parameter_class.R
\name{parameter}
\alias{is.parameter}
\alias{parameter}
\alias{pos}
\alias{print.parameter}
\alias{unc}
\alias{unit}
\alias{update.parameter}
\title{gpe parameter class}
\usage{
unit(value = 0.5)

pos(value = 1)

unc(value = 0)

is.parameter(x)

\method{update}{parameter}(object, new_value, continuous = FALSE, ...)

\method{print}{parameter}(x, ...)
}
\arguments{
\item{value}{the value of the parameter, on its true scale.}

\item{x}{a parameter object, or an object to be tested as one.}

\item{object}{a parameter object, or an object to be tested as one.}

\item{new_value}{a new value to assign to the parameter, given either on 
the true scale, or on the scale of its continuous transform, depending on
\code{continuous}.}

\item{continuous}{whether to return (or update) with the true value of the 
parameter or with the value of its continuous transform.}

\item{\dots}{further arguments passed to or from other methods.}
}
\description{
Functions to create and interact with parameter objects
}
\details{
The constructor functions (\code{pos}, \code{unit} and \code{unc}) return 
parameter objects with a set value. These objects contain member functions to test
whether other values are within the constraints of the parameter and to convert 
between the true value and a continuous transformation of it. 

\code{unit} creates a parameter constrained to be on the unit interval 
(greater than 0 and less than 1).
\code{pos} creates a parameter constrained to be positive.
\code{unc} creates an unconstrained (continuously supported) parameter.

The value (either the true value or a continuous transformation) of the 
parameter can be returned by executing the object.
The value can be changed using the \code{update} method.
\code{is.parameter} returns a logical indicating whether the 
object is a gpe parameter object. \code{print} returns a very simple summary
of the parameter, its transformations and its support.
}
\examples{

# create a parameter on the unit interval
# with initial value of 0.9
p <- unit(0.9)

# return value (on true scale)
p()

# return value on continuous scale
p(continuous = TRUE)


# create a strictly positive parameter
# with initial value of 2.5
sigma <- pos(2.5)

# return value (on true scale)
sigma()

# return value on continuous scale
sigma(continuous = TRUE)
  

# create an unconstrained (continuous support) parameter
# with initial value of -3
x <- unc(-3)

# return value (on true scale)
x()

# return value on continuous scale
x(continuous = TRUE)


# are these parameters? 
is.parameter(p)
is.parameter(sigma)
 

# update on the true scale
p <- update(p, 0.6)
p()

# update on the continuous scale
p <- update(p, -1, continuous = TRUE)
p()


# print summaries of these parameters and their member functions
p
sigma
x
}


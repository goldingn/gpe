% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gp_class.R
\name{predict.gp}
\alias{predict.gp}
\title{predict method for Gaussian process models}
\usage{
\method{predict}{gp}(object, newdata = NULL, type = c("link", "response"),
  sd = FALSE, ...)
}
\arguments{
\item{object}{a fitted GP model; an object of class \code{gp} produced by
\code{\link{gp}}.}

\item{newdata}{an optional data frame containing new data to predict to.
If \code{NULL}, the training data is used instead.}

\item{type}{the type of prediction required. The default (\code{'link'} 
predicts the value of the latent Gaussian process at the new locations,
\code{'response'} instead predicts on the scale of the response variable.}

\item{sd}{whether to report standard deviations of the prediction.}

\item{\dots}{further arguments to be passed to other methods, currently 
ignored}
}
\value{
if \code{sd = FALSE} a vector of predictions. If 
\code{sd = TRUE}, a list with components: \code{fit} the 
predictions (as for \code{sd = FALSE}); \code{sd} estimated
standard deviations of the latent gaussians.
}
\description{
Makes predictions from a fitted GP model in a similar way 
to \code{predict.glm} from GLMs
}
\examples{
# make some fake data
n <- 100  # observations

# dataframes
df <- data.frame(x = sort(runif(n, -5, 5)))
prediction_df <- data.frame(x = seq(min(df$x), max(df$x), len = 500))

# fake Gaussian response data
f <- sin(df$x)
y <- rnorm(n, f, 1)

# fit a full (non-sparse) GP model (without updating the hyperparameters)
# with rbf kernel and observation error
m1 <- gp(y ~ rbf('x') + iid(), df, gaussian)

# make predictions from it (only the mean)
mu <- predict(m1, prediction_df)

plot(mu ~ prediction_df$x, type = 'l', ylim = range(y))
points(y ~ df$x, pch = 16)

# now predict with the standard deviations
res <- predict(m1, prediction_df, sd = TRUE)

# get upper and lower 95\% credible intervals
upper <- res$fit + 1.96 * res$sd
lower <- res$fit - 1.96 * res$sd

plot(mu ~ prediction_df$x, type = 'l',
 ylim = range(y, upper, lower))
lines(upper ~ prediction_df$x, lty = 2)
lines(lower ~ prediction_df$x, lty = 2)
points(y ~ df$x, pch = 16)
}

